{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getNews } from './news-actions'; // Define a type for the slice state\n// Define the initial state using that type\n\nconst initialState = {\n  news: null,\n  isLoading: false\n};\nexport const news = createSlice({\n  name: 'news',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getNews.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(getNews.rejected, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.isLoading = false;\n      state.news = null;\n    });\n    builder.addCase(getNews.fulfilled, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      console.log(\"getNews.fulfilled payload: \", payload);\n      state.isLoading = false;\n      state.news = payload;\n    });\n  }\n});\nexport const {} = news.actions;\nexport default news.reducer;","map":{"version":3,"sources":["/Users/bonginkosilukhele/React/test/bet-test/src/redux/slices/news/news.ts"],"names":["createSlice","getNews","initialState","news","isLoading","name","reducers","extraReducers","builder","addCase","pending","state","rejected","payload","fulfilled","console","log","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,OAAT,QAAwB,gBAAxB,C,CAEA;AAGA;;AACA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,IADyB;AAE/BC,EAAAA,SAAS,EAAE;AAFoB,CAAjC;AAKA,OAAO,MAAMD,IAAI,GAAGH,WAAW,CAAC;AAC9BK,EAAAA,IAAI,EAAE,MADwB;AAE9B;AACAH,EAAAA,YAAY,EAACA,YAHiB;AAI9BI,EAAAA,QAAQ,EAAE,EAJoB;AAQ9BC,EAAAA,aAAa,EAAEC,OAAO,IAAG;AACvBA,IAAAA,OAAO,CAACC,OAAR,CAAgBR,OAAO,CAACS,OAAxB,EAAiCC,KAAD,IAAS;AACvCA,MAAAA,KAAK,CAACP,SAAN,GAAiB,IAAjB;AACD,KAFD;AAGAI,IAAAA,OAAO,CAACC,OAAR,CAAgBR,OAAO,CAACW,QAAxB,EAAiC,CAACD,KAAD,WAAmB;AAAA,UAAZ;AAACE,QAAAA;AAAD,OAAY;AAClDF,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACR,IAAN,GAAY,IAAZ;AACD,KAHD;AAIAK,IAAAA,OAAO,CAACC,OAAR,CAAgBR,OAAO,CAACa,SAAxB,EAAkC,CAACH,KAAD,YAAmB;AAAA,UAAZ;AAACE,QAAAA;AAAD,OAAY;AACnDE,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,OAA3C;AAEAF,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACR,IAAN,GAAYU,OAAZ;AACD,KALD;AAMD;AAtB6B,CAAD,CAAxB;AAyBP,OAAO,MAAM,KAAOV,IAAI,CAACc,OAAlB;AAGP,eAAed,IAAI,CAACe,OAApB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { INewsState } from '../../../utils/interfaces'\nimport { getNews } from './news-actions'\n\n// Define a type for the slice state\n\n\n// Define the initial state using that type\nconst initialState: INewsState = {\n  news: null,\n  isLoading: false\n}\n\nexport const news = createSlice({\n  name: 'news',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState:initialState,\n  reducers: {\n    \n\n  },\n  extraReducers: builder =>{\n    builder.addCase(getNews.pending,(state)=>{\n      state.isLoading =true\n    })\n    builder.addCase(getNews.rejected,(state,{payload})=>{\n      state.isLoading = false;\n      state.news= null\n    })\n    builder.addCase(getNews.fulfilled,(state,{payload})=>{\n      console.log(\"getNews.fulfilled payload: \", payload);\n      \n      state.isLoading = false;\n      state.news= payload\n    })\n  }\n})\n\nexport const {  } = news.actions;\n\n\nexport default news.reducer;"]},"metadata":{},"sourceType":"module"}