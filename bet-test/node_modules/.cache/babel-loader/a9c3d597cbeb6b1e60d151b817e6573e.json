{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { setRegister } from './user-actions';\n// Define a type for the slice state\n// Define the initial state using that type\nconst initialState = {\n  email: null,\n  name: null,\n  dob: null,\n  token: null,\n  loggedIn: false,\n  isLoading: false\n};\nexport const user = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState: initialState,\n  reducers: {\n    logOut: state => {\n      state = {\n        email: null,\n        name: null,\n        dob: null,\n        token: null,\n        loggedIn: false,\n        isLoading: false\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(setRegister.pending, state => {\n      state.isLoading = false;\n    });\n    builder.addCase(setRegister.rejected, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n    });\n    builder.addCase(setRegister.fulfilled, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n    });\n  }\n});\nexport const {\n  logOut\n} = user.actions;\nexport default user.reducer;","map":{"version":3,"sources":["/Users/bonginkosilukhele/React/test/bet-test/src/redux/slices/auth/user.ts"],"names":["createSlice","setRegister","initialState","email","name","dob","token","loggedIn","isLoading","user","reducers","logOut","state","extraReducers","builder","addCase","pending","rejected","payload","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAGA;AAGA;AACA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,IADwB;AAE/BC,EAAAA,IAAI,EAAE,IAFyB;AAG/BC,EAAAA,GAAG,EAAE,IAH0B;AAI/BC,EAAAA,KAAK,EAAE,IAJwB;AAK/BC,EAAAA,QAAQ,EAAE,KALqB;AAM/BC,EAAAA,SAAS,EAAE;AANoB,CAAjC;AASA,OAAO,MAAMC,IAAI,GAAGT,WAAW,CAAC;AAC9BI,EAAAA,IAAI,EAAE,MADwB;AAE9B;AACAF,EAAAA,YAAY,EAACA,YAHiB;AAI9BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAGC,KAAD,IAAW;AACjBA,MAAAA,KAAK,GAAG;AACNT,QAAAA,KAAK,EAAE,IADD;AAENC,QAAAA,IAAI,EAAE,IAFA;AAGNC,QAAAA,GAAG,EAAE,IAHC;AAINC,QAAAA,KAAK,EAAE,IAJD;AAKNC,QAAAA,QAAQ,EAAE,KALJ;AAMNC,QAAAA,SAAS,EAAE;AANL,OAAR;AAQD;AAVO,GAJoB;AAiB9BK,EAAAA,aAAa,EAAEC,OAAO,IAAG;AACvBA,IAAAA,OAAO,CAACC,OAAR,CAAgBd,WAAW,CAACe,OAA5B,EAAqCJ,KAAD,IAAS;AAC3CA,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB;AACD,KAFD;AAGAM,IAAAA,OAAO,CAACC,OAAR,CAAgBd,WAAW,CAACgB,QAA5B,EAAqC,CAACL,KAAD,WAAmB;AAAA,UAAZ;AAACM,QAAAA;AAAD,OAAY;AAEvD,KAFD;AAGAJ,IAAAA,OAAO,CAACC,OAAR,CAAgBd,WAAW,CAACkB,SAA5B,EAAsC,CAACP,KAAD,YAAmB;AAAA,UAAZ;AAACM,QAAAA;AAAD,OAAY;AAExD,KAFD;AAGD;AA3B6B,CAAD,CAAxB;AA8BP,OAAO,MAAM;AAAEP,EAAAA;AAAF,IAAaF,IAAI,CAACW,OAAxB;AAGP,eAAeX,IAAI,CAACY,OAApB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { IUserState } from '../../../utils/interfaces'\nimport { setRegister } from './user-actions'\nimport { isLoading } from '../../../../../auth-server/node_modules/@istanbuljs/load-nyc-config';\n\n// Define a type for the slice state\n\n\n// Define the initial state using that type\nconst initialState: IUserState = {\n  email: null,\n  name: null,\n  dob: null,\n  token: null,\n  loggedIn: false,\n  isLoading: false\n}\n\nexport const user = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState:initialState,\n  reducers: {\n    logOut: (state) => {\n      state = {\n        email: null,\n        name: null,\n        dob: null,\n        token: null,\n        loggedIn: false,\n        isLoading: false,\n      }\n    }\n\n  },\n  extraReducers: builder =>{\n    builder.addCase(setRegister.pending,(state)=>{\n      state.isLoading = false\n    })\n    builder.addCase(setRegister.rejected,(state,{payload})=>{\n\n    })\n    builder.addCase(setRegister.fulfilled,(state,{payload})=>{\n\n    })\n  }\n})\n\nexport const { logOut } = user.actions;\n\n\nexport default user.reducer;"]},"metadata":{},"sourceType":"module"}