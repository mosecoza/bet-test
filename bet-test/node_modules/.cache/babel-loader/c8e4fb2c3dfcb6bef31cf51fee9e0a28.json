{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getProfile, login } from './user-actions'; // Define a type for the slice state\n// Define the initial state using that type\n\nconst initialState = {\n  user: {\n    email: '',\n    name: \"\",\n    userId: 0\n  },\n  token: undefined,\n  loggedIn: false,\n  isLoading: false\n};\nexport const user = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState: initialState,\n  reducers: {\n    logOut: state => {\n      state = {\n        user: {\n          email: '',\n          name: \"\",\n          userId: 0\n        },\n        token: undefined,\n        loggedIn: false,\n        isLoading: false\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getProfile.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(getProfile.rejected, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.loggedIn = false;\n      state.token = undefined;\n      state.isLoading = false;\n    });\n    builder.addCase(getProfile.fulfilled, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n    });\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(login.rejected, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.loggedIn = false;\n      state.token = undefined;\n      state.isLoading = false;\n    });\n    builder.addCase(login.fulfilled, (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n\n      if (payload) {\n        state.loggedIn = true;\n        state.token = payload.access_token;\n        state.user = payload.user;\n        state.isLoading = false;\n      } else {\n        state.loggedIn = false;\n        state.token = undefined;\n        state.isLoading = false;\n      }\n    });\n  }\n});\nexport const {\n  logOut\n} = user.actions;\nexport default user.reducer;","map":{"version":3,"sources":["/Users/bonginkosilukhele/React/test/bet-test/src/redux/slices/auth/user.ts"],"names":["createSlice","getProfile","login","initialState","user","email","name","userId","token","undefined","loggedIn","isLoading","reducers","logOut","state","extraReducers","builder","addCase","pending","rejected","payload","fulfilled","access_token","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { IUserState } from '../../../utils/interfaces'\nimport { getProfile, login } from './user-actions'\n\n// Define a type for the slice state\n\n\n// Define the initial state using that type\nconst initialState: IUserState = {\n  user: {\n    email:'', name:\"\", userId:0\n  },\n  token: undefined,\n  loggedIn: false,\n  isLoading: false\n}\n\nexport const user = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState:initialState,\n  reducers: {\n    logOut: (state) => {\n      state = {\n        user:{\n          email:'', name:\"\", userId:0\n        },\n        token: undefined,\n        loggedIn: false,\n        isLoading: false,\n      }\n    }\n\n  },\n  extraReducers: builder =>{\n    builder.addCase(getProfile.pending,(state)=>{\n      state.isLoading = true\n    })\n    builder.addCase(getProfile.rejected,(state,{payload})=>{\n      state.loggedIn = false\n      state.token= undefined\n      state.isLoading = false\n    })\n    builder.addCase(getProfile.fulfilled,(state,{payload})=>{\n\n    })\n    builder.addCase(login.pending,(state)=>{\n      state.isLoading = true\n    })\n    builder.addCase(login.rejected,(state,{payload})=>{\n      state.loggedIn = false\n      state.token= undefined\n      state.isLoading = false\n    })\n    builder.addCase(login.fulfilled,(state,{payload})=>{\n\n\n      if(payload){\n\n        state.loggedIn = true\n        state.token= payload.access_token\n        state.user= payload.user\n        state.isLoading = false\n      } else{\n        state.loggedIn = false\n      state.token= undefined\n      state.isLoading = false\n      }\n    })\n  }\n})\n\nexport const { logOut } = user.actions;\n\n\nexport default user.reducer;"]},"metadata":{},"sourceType":"module"}