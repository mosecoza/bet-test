{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { setRegister } from './auth-actions'; // import type { RootState } from '../../app/store'\n// Define a type for the slice state\n// Define the initial state using that type\n\nconst initialState = {\n  email: null,\n  name: null,\n  dob: null,\n  token: null\n};\nexport const userSlice = createSlice({\n  name: 'User',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    logOut: state => {\n      state = {\n        email: null,\n        name: null,\n        dob: null,\n        token: null\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(setRegister.pending, state => {});\n    builder.addCase(setRegister.pending, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n    });\n    builder.addCase(setRegister.pending, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n    });\n  }\n});\nexport const {\n  logOut\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/bonginkosilukhele/React/bet-test/src/redux/slices/auth/auth.ts"],"names":["createSlice","setRegister","initialState","email","name","dob","token","userSlice","reducers","logOut","state","extraReducers","builder","addCase","pending","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAASC,WAAT,QAA4B,gBAA5B,C,CACA;AAEA;AAGA;;AACA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,IADwB;AAE/BC,EAAAA,IAAI,EAAE,IAFyB;AAG/BC,EAAAA,GAAG,EAAE,IAH0B;AAI/BC,EAAAA,KAAK,EAAE;AAJwB,CAAjC;AAOA,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAE,MAD6B;AAEnC;AACAF,EAAAA,YAHmC;AAInCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAGC,KAAD,IAAW;AACjBA,MAAAA,KAAK,GAAG;AACNP,QAAAA,KAAK,EAAE,IADD;AAENC,QAAAA,IAAI,EAAE,IAFA;AAGNC,QAAAA,GAAG,EAAE,IAHC;AAINC,QAAAA,KAAK,EAAE;AAJD,OAAR;AAMD;AARO,GAJyB;AAenCK,EAAAA,aAAa,EAAEC,OAAO,IAAG;AACvBA,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,WAAW,CAACa,OAA5B,EAAqCJ,KAAD,IAAS,CAE5C,CAFD;AAGAE,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,WAAW,CAACa,OAA5B,EAAoC,CAACJ,KAAD,WAAmB;AAAA,UAAZ;AAACK,QAAAA;AAAD,OAAY;AAEtD,KAFD;AAGAH,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,WAAW,CAACa,OAA5B,EAAoC,CAACJ,KAAD,YAAoB;AAAA,UAAZ;AAACK,QAAAA;AAAD,OAAY;AAEvD,KAFD;AAGD;AAzBkC,CAAD,CAA7B;AA4BP,OAAO,MAAM;AAAEN,EAAAA;AAAF,IAAaF,SAAS,CAACS,OAA7B;AAGP,eAAeT,SAAS,CAACU,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { IUserState } from '../../../utils/interfaces'\nimport { setRegister } from './auth-actions'\n// import type { RootState } from '../../app/store'\n\n// Define a type for the slice state\n\n\n// Define the initial state using that type\nconst initialState: IUserState = {\n  email: null,\n  name: null,\n  dob: null,\n  token: null\n}\n\nexport const userSlice = createSlice({\n  name: 'User',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    logOut: (state) => {\n      state = {\n        email: null,\n        name: null,\n        dob: null,\n        token: null\n      }\n    }\n\n  },\n  extraReducers: builder =>{\n    builder.addCase(setRegister.pending,(state)=>{\n\n    })\n    builder.addCase(setRegister.pending,(state,{payload})=>{\n\n    })\n    builder.addCase(setRegister.pending,(state, {payload})=>{\n\n    })\n  }\n})\n\nexport const { logOut } = userSlice.actions;\n\n\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}